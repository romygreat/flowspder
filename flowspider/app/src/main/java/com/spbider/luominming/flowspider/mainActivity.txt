package com.spbider.luominming.flowspider;

import android.Manifest;
import android.app.usage.NetworkStats;
import android.app.usage.NetworkStatsManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.TrafficStats;
import android.os.Bundle;
import android.os.RemoteException;
import android.provider.Settings;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.telephony.TelephonyManager;
import android.text.format.Formatter;
import android.util.Log;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.Toast;

import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentHashMap;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener, View.OnClickListener {
    String TAG = "uid";
    private Button test;
    String appName;
    private NetworkStatsManager networkStatsManager;
    private ConcurrentHashMap<String, Integer> appSimpleinfo = new ConcurrentHashMap<>();
    Drawable drawable;
    TelephonyManager tm;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(MainActivity.this,
                    new String[]{Manifest.permission.READ_PHONE_STATE},
                    2);
            tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
        }
        initView();
        networkStatsManager = (NetworkStatsManager) getSystemService(Context.NETWORK_STATS_SERVICE);
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.PACKAGE_USAGE_STATS)
                != PackageManager.PERMISSION_GRANTED) {
        } else {
            Log.i("test", "onCreate:已经有权限了 ");
        }

        setOnClickListenser();

        setSupportActionBar(toolbar);
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);

        navigationView.setNavigationItemSelectedListener(this);


    }

    private void setOnClickListenser() {
        test.setOnClickListener(this);
    }

    private void initView() {
        test = findViewById(R.id.test);
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {

        } else if (id == R.id.nav_manage) {

        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.test:
                // startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
                NetworkStats.Bucket bucket = null;
            {
//                try {
//
//                    if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
//                        return;
//                    }
//                    String subId = tm.getSubscriberId();
                try {
                    bucket = networkStatsManager.querySummaryForDevice(ConnectivityManager.TYPE_WIFI,
                            "", 0, System.currentTimeMillis());
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }
                Log.i("Info", "Total: " + Formatter.formatFileSize(MainActivity.this,
                        bucket.getRxBytes()+bucket.getTxBytes())); //手机显示使用的是总量的数据
                    Log.i("Info", "rx: " + Formatter.formatFileSize(MainActivity.this,
                            bucket.getRxBytes())); //手机的下行速率
                    Log.i("Info", "tx: " + Formatter.formatFileSize(MainActivity.this,
                            bucket.getTxBytes())); //手机的上行速率
                   new Thread(){
                       @Override
                       public void run() {
                           Log.i(TAG, "run: getuid");
                           getuid();

                       }
                   }.start();
                test.setText(
                        Formatter.formatFileSize(MainActivity.this,
                                bucket.getRxBytes()+bucket.getTxBytes()));
//                }
                break;
            default:
       break;
        }
    }
    public void dayin(String str){
        Toast.makeText(MainActivity.this,str,Toast.LENGTH_SHORT).show();
    }
    private int  getuid(){
        PackageManager pm = this.getPackageManager();
        int uid=0;
        long time=System.currentTimeMillis();
        List<PackageInfo> packinfos = pm.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_PERMISSIONS);
        for (PackageInfo info : packinfos) {
            String[] premissions = info.requestedPermissions;
            if (premissions != null && premissions.length > 0)
            {
                for (String premission : premissions) {
                    long totalliu=0L;
                    long totalRX=0L;
                    long totalTx=0L;
                    if ("android.permission.INTERNET".equals(premission)) {
                        uid = info.applicationInfo.uid;
                         appName=(String) pm.getApplicationLabel(info.applicationInfo);
                         drawable=info.applicationInfo.loadIcon(pm);
                         Log.i(TAG, "name:"+appName+"" +
                                "\ngetuid: "+uid);
                        try {
                            NetworkStats.Bucket bucketuid = new NetworkStats.Bucket();
                            NetworkStats Stats=networkStatsManager.queryDetailsForUid(ConnectivityManager.TYPE_WIFI,"",
                                    0,System.currentTimeMillis(),uid);
                            int nextbucket=0;
                            Stats.getNextBucket(bucketuid);
                            totalliu+=bucketuid.getRxBytes()+bucketuid.getTxBytes();
                            while (Stats.hasNextBucket()){
                                Stats.getNextBucket(bucketuid);
                                Log.i(TAG, "getuid: "+uid+"nextBucket"+nextbucket+"\n");
                                Log.i(TAG, appName+"totalnextbucket: "+formate(bucketuid.getRxBytes()+bucketuid.getTxBytes()));
                                totalliu+=bucketuid.getRxBytes()+bucketuid.getTxBytes();
                                totalRX+=bucketuid.getRxBytes();
                                totalTx+=bucketuid.getTxBytes();
                                nextbucket++;
                                Log.i(TAG, appName+"leijia"+formate(totalliu));
                            }
                            Log.i(TAG, "getuid: nextBucket end");
                            Log.i(TAG, appName+"\nRX: "+formate(totalRX));
                            Log.i(TAG, appName+"\nTX: "+formate(totalTx));
                            Log.i(TAG, appName+"totalliu: "+formate(totalliu));
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        Log.i(TAG, "getuid: currentTimeMillis"+(System.currentTimeMillis()-time));
        return uid;
    }
    public String formate(long l){
        String t=Formatter.formatFileSize(MainActivity.this, l);
        return t;
    }
 public void jishi(long period){
     Timer timer=new Timer();
     TimerTask timerTask=new TimerTask() {
         @Override
         public void run() {
             getuid();
             Log.i(TAG, "run: timertask");
         }
     };
     timer.schedule(timerTask,1000,period);
 }
}
 ////
 package com.spbider.luominming.flowspider;

 import android.Manifest;
 import android.app.Activity;
 import android.app.AppOpsManager;
 import android.app.usage.NetworkStats;
 import android.app.usage.NetworkStatsManager;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
 import android.net.ConnectivityManager;
 import android.net.TrafficStats;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import android.os.RemoteException;
 import android.provider.Settings;
 import android.support.annotation.NonNull;
 import android.support.design.widget.FloatingActionButton;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.content.ContextCompat;
 import android.telephony.TelephonyManager;
 import android.text.LoginFilter;
 import android.text.format.Formatter;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.support.design.widget.NavigationView;
 import android.support.v4.view.GravityCompat;
 import android.support.v4.widget.DrawerLayout;
 import android.support.v7.app.ActionBarDrawerToggle;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.widget.AdapterView;
 import android.widget.BaseAdapter;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.concurrent.ConcurrentHashMap;
 public class MainActivity extends AppCompatActivity
         implements NavigationView.OnNavigationItemSelectedListener, View.OnClickListener {
     String TAG = "test";
     private Button test;
     String appName;
     private NetworkStatsManager networkStatsManager;
     Drawable drawable;
     TelephonyManager tm;
     ArrayList<HashMap<String, Object>> apptest = new ArrayList<>();
     ListView mListView = null;
     MyListAdapter myAdapter = null;
     String mtype = "WIFI";
     int countTime = 0;
     String subId;
     boolean b = false;
     boolean dislog = false;
     TrafficStats trafficStats=new TrafficStats();
     AsyncTask<String, String, String> task = new AsyncTask<String, String, String>() {
         @Override
         protected String doInBackground(String... strings) {
 //            Log.i(TAG, "doInBackground: " + strings[0]);
             if (strings[0].equals("Data")) {
                 apptest.clear();
                 getMoblieData();

             } else {
 //                Log.i(TAG, "doInBackground:else " + strings[0]);

                 //testQuery();

                 getuid();
 //              ShellUtils.CommandResult  test= ShellUtils.execCommand("logcat -d -f /sdcard/logabc",false,true);
 //                Log.i(TAG, "doInBackgroundtest:test.errorMsg\n" +
 //                        " "+test.errorMsg+"test.successMsg"+test.successMsg);
             }
             return null;
         }

         @Override
         protected void onPostExecute(String s) {
             myAdapter = new MyListAdapter(MainActivity.this);
             mListView.setAdapter(myAdapter);
             // mListView.setClickable(false);
             mListView.setItemsCanFocus(false);
             if (mtype.equals("Data")) {
                 if (subId == null)
                     dayin("请查看SIM卡是否插入 ");
             }
             // jishi(100000);
         }
     };
     private Handler handler = new Handler(Looper.getMainLooper()) {
         @Override
         public void handleMessage(Message msg) {
             super.handleMessage(msg);
             if (msg.what == 1) {

             }
         }
     };
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
         Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
         initView();
         networkStatsManager = (NetworkStatsManager) getSystemService(Context.NETWORK_STATS_SERVICE);
         setOnClickListenser();
         setSupportActionBar(toolbar);
         DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
         ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                 this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
         drawer.addDrawerListener(toggle);
         toggle.syncState();
         NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
         navigationView.setNavigationItemSelectedListener(this);
 //        myAdapter = new MyListAdapter(MainActivity.this);
 //        mListView.setAdapter(myAdapter);
 //        // mListView.setClickable(false);
 //        mListView.setItemsCanFocus(false);
 //        myAdapter.notifyDataSetChanged();
         if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
             ActivityCompat.requestPermissions(MainActivity.this,
                     new String[]{Manifest.permission.READ_PHONE_STATE,Manifest.permission.WRITE_EXTERNAL_STORAGE},
                     2);
             b = true;
             tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
         }
         else
             {
             if (hasPermissionToReadNetworkStats()) {
                 dayin("正在获取数据，请稍后");
                 tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
                 Intent intent = getIntent();
                 mtype = intent.getStringExtra("type");
                 if (mtype == null) {
                     mtype = "WIFI";
 //                    ShellUtils.execCommand("logcat -d -f /sdcard/logabc",false,false);
                   //  ShellUtils.execCommand("logcat -v raw -s luominmingWIFI:I -d -f /sdcard/log3456",false,false);

                 }
               task.execute(mtype);

                 //getMoblieData();
 //                new Thread(){
 //                    @Override
 //                    public void run() {
 //                        super.run();
 //                        getuid();
 //                    }
 //                }.start();
             }
         }
     }
     @Override
     protected void onPostResume() {
         super.onPostResume();
     }
     private void setOnClickListenser() {
        // test.setOnClickListener(this);

     }
     private void initView() {
        // test = findViewById(R.id.test);
         mListView = findViewById(R.id.listView);
     }
     @Override
     public void onBackPressed() {
         DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
         if (drawer.isDrawerOpen(GravityCompat.START)) {
             drawer.closeDrawer(GravityCompat.START);
         } else {
             super.onBackPressed();
         }
     }
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         // Inflate the menu; this adds items to the action bar if it is present.
         getMenuInflater().inflate(R.menu.main, menu);
         return true;
     }
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         // Handle action bar item clicks here. The action bar will
         // automatically handle clicks on the Home/Up button, so long
         // as you specify a parent activity in AndroidManifest.xml.
         int id = item.getItemId();

         //noinspection SimplifiableIfStatement
         if (id == R.id.action_settings) {
             dayin("settings");
             return true;
         }
         return super.onOptionsItemSelected(item);
     }
     @Override
     public boolean onNavigationItemSelected(MenuItem item) {
         int id = item.getItemId();
         if (id == R.id.access) {
             startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
 //            dayin("test");
 //            Log.i(TAG, "onNavigationItemSelected:test1 ");
         } else if (id == R.id.getWIFI) {
             prepareDis();
             Intent intent1 = new Intent(MainActivity.this, MainActivity.class);
             intent1.putExtra("type", "WIFI");
             startActivity(intent1);
             MainActivity.this.finish();
         } else if (id == R.id.getData) {
             Intent intent1 = new Intent(MainActivity.this, MainActivity.class);
             intent1.putExtra("type", "Data");
             startActivity(intent1);
             MainActivity.this.finish();
         } else if (id == R.id.jishi) {
             countTime = 0;
             dayin("开始专项测试");
             jishi(1000 * 60*60);


         } else if (id == R.id.nav_share) {


         } else if (id == R.id.nav_send) {
             dayin("send");

         }

         DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
         drawer.closeDrawer(GravityCompat.START);
         return true;
     }

     @Override
     public void onClick(View view) {
         switch (view.getId()) {
 //            case R.id.test:
 //                // startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
 //                prepareDis();
 //                break;
             default:
                 break;
         }
     }

     private void prepareDis() {
         NetworkStats.Bucket bucket = null;
         {
             getMoblieData();
             try {
                 bucket = networkStatsManager.querySummaryForDevice(ConnectivityManager.TYPE_WIFI,
                         "", 0, System.currentTimeMillis());
                 bucket.getUid();
                 Log.i(TAG, "prepareDis: "+ bucket.getUid());
             } catch (RemoteException e) {
                 e.printStackTrace();
             }
         }
         Log.i("Info", "Total: " + Formatter.formatFileSize(MainActivity.this,
                 bucket.getRxBytes() + bucket.getTxBytes())); //手机显示使用的是总量的数据
         Log.i("Info", "rx: " + Formatter.formatFileSize(MainActivity.this,
                 bucket.getRxBytes())); //手机的下行速率
         Log.i("Info", "tx: " + Formatter.formatFileSize(MainActivity.this,
                 bucket.getTxBytes())); //手机的上行速率

         Intent intent1 = new Intent(MainActivity.this, MainActivity.class);
         //ealWithRepaireActivity进入故障处理
         startActivity(intent1);
         MainActivity.this.finish();
 //       // test.setText(
 //                Formatter.formatFileSize(MainActivity.this,
 //                        bucket.getRxBytes() + bucket.getTxBytes()));
 ////                }
     }

     public void dayin(String str) {
         Toast.makeText(MainActivity.this, str, Toast.LENGTH_SHORT).show();
     }
     private int getuid() {
         PackageManager pm = this.getPackageManager();
         int uid = 0;
         long time = System.currentTimeMillis();
         List<PackageInfo> packinfos = pm.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_PERMISSIONS);
         for (PackageInfo info : packinfos) {
             String[] premissions = info.requestedPermissions;
             if (premissions != null && premissions.length > 0) {
                 for (String premission : premissions) {
                     long totalliu = 0L;
                     long totalRX = 0L;
                     long totalTx = 0L;
                     if ("android.permission.INTERNET".equals(premission))
                     {
                         uid = info.applicationInfo.uid;
                         appName = (String) pm.getApplicationLabel(info.applicationInfo);
                         drawable = info.applicationInfo.loadIcon(pm);
 //                         Log.i(TAG, "name:"+appName+"" +
 //                                "\ngetuid: "+uid);

                         try {
                             NetworkStats.Bucket bucketuid = new NetworkStats.Bucket();
                             NetworkStats stats = networkStatsManager.queryDetailsForUid(ConnectivityManager.TYPE_WIFI, "",
                                     0, System.currentTimeMillis(), uid);
                             //------------------------------------------------------------------------------------------

                             //------------------------------------------------------------------------------------------
                             int nextbucket = 0;
                             stats.getNextBucket(bucketuid);
                         //                            Log.i(TAG, "getuid: "+bucketuid1);
                             totalliu += bucketuid.getRxBytes() + bucketuid.getTxBytes();
                             totalRX += bucketuid.getRxBytes();
                             totalTx += bucketuid.getTxBytes();
 //                            Log.i(TAG, "getuid: "+stats.hasNextBucket());
                             while (stats.hasNextBucket()) {
                                 stats.getNextBucket(bucketuid);
                               //  Log.i(TAG, "getuid: "+uid+"nextBucket"+nextbucket+"\n");
                              //   Log.i(TAG, appName+"totalnextbucket: "+formate(bucketuid.getRxBytes()+bucketuid.getTxBytes()));
                                 totalliu += bucketuid.getRxBytes() + bucketuid.getTxBytes();
                                 totalRX += bucketuid.getRxBytes();
                                 totalTx += bucketuid.getTxBytes();
                                 nextbucket++;
                             }
                             HashMap<String, Object> test = new HashMap<>();
                            if (totalliu > 0)
                             {
                                 test.put("appname", appName);
                                 test.put("icon", drawable);
                                 test.put("RX", "上行" + formate(totalTx));
                                 test.put("TX", "下行" + formate(totalRX));//formate(totalRX))正确正确结果为下行，KEY值是需要修改的
                                 test.put("total", totalliu);
                                 apptest.add(test);
 //                                Log.i("luominmingWIFI", appName + "," + formate(totalTx) + "   下行: " + formate(totalRX) +
 //                                        "  总计: " + formate(totalliu) + "\n");
                                 if (dislog)
                                     Log.i("luominmingWIFI", appName + "," + formate(totalTx) + "," + formate(totalRX) +
                                             "," + formate(totalliu) + "\n");
                             }
                         } catch (RemoteException e) {
                             e.printStackTrace();
                         }
                     }
                 }
             }
         }
         return uid;
     }

     public String formate(long l) {
         String t = Formatter.formatFileSize(MainActivity.this, l);
         return t;
     }
     public void jishi(long period) {

         Timer timer = new Timer();
         TimerTask timerTask = new TimerTask(){
             @Override
             public void run() {
                 if (countTime==0){
                     Log.i("luominmingWIFI", "APP名称"+",上行"+",下行"+",总量");
                 }
                 dislog = true;
                 if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
                 }
                 subId = tm.getSubscriberId();//可能报错，需要注意
                 apptest.clear();  if(countTime<9){
                     ShellUtils.execCommand("logcat -c",false,false);
 //                    Log.i("luominmingSIM", "APP名称"+",上行"+",下行"+",总量");
                     Log.i("luominmingSIM", "-----第" + countTime + "小时流量统计开始-----");
                     if(subId!=null)
                     {
                         Log.i("luominmingSIM", "-----第" + countTime + "小时SIM流量统计开始-----");
                     getMoblieData();
 //                        Log.i("luominmingSIM", "-----第" + countTime + "小时流量统计结束-----");
                     }
                     Log.i("luominmingWIFI", "-----第" + countTime + "小时WIFI流量统计开始-----");
                     getuid();
 //                    Log.i("luominmingWIFI", "-----第" + countTime + "小时流量统计结束-----");
                     ShellUtils.execCommand("logcat -v raw -s luominmingWIFI:I -d -f /sdcard/"+"WIFI统计结果.txt",false,false);
                     //ShellUtils.execCommand("logcat -v raw -s luominmingSIM:I -d -f /sdcard/"+"SIM统计结果.txt",false,false);
                 }
                 countTime++;

             }
         };
         timer.schedule(timerTask, 1000, period);
     }

     class MyListAdapter extends BaseAdapter {
         public MyListAdapter(Context context) {
             mContext = context;
         }

         public int getCount() {
             return apptest.size();
         }

         @Override
         public boolean areAllItemsEnabled() {
             return false;
         }

         public Object getItem(int position) {
             return position;
         }

         public long getItemId(int position) {
             return position;
         }

         public View getView(int position, View convertView, ViewGroup parent) {
             ViewHolder holder;
             if (convertView == null) {
                 holder = new ViewHolder();
                 convertView = LayoutInflater.from(mContext).inflate(R.layout.layout_main_item, null);
                 holder.iamge = convertView.findViewById(R.id.iv_main_item_laucher);
                 holder.title = convertView.findViewById(R.id.tv_main_item_name);
                 holder.text = convertView.findViewById(R.id.tv_main_item_download);
                 holder.upload = convertView.findViewById(R.id.tv_main_item_upload);
                 convertView.setTag(holder);
             }
             holder = (ViewHolder) convertView.getTag();
             try {
                 holder.title.setText((String) apptest.get(position).get("appname"));
                 holder.text.setText((String) apptest.get(position).get("RX"));
                 holder.upload.setText((String) apptest.get(position).get("TX"));//没有区分上行与下行
                 //  Log.i(TAG, "getView: " + apptest.get(position).get("TX"));
                 holder.iamge.setImageDrawable((Drawable) apptest.get(position).get("icon"));
             } catch (Exception e) {
                 e.printStackTrace();
             }
             return convertView;
         }
         @Override
         public void notifyDataSetChanged() {
             super.notifyDataSetChanged();
             // throw  new IllegalStateException();
             apptest.clear();
         }

         private Context mContext;
     }

     public class ViewHolder {
         ImageView iamge = null;
         TextView title = null;
         TextView text = null;
         TextView upload = null;
     }

     public void getMoblieData() {
         if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
         }
         subId = tm.getSubscriberId();


         PackageManager pm = this.getPackageManager();
         int uid = 0;
         long time = System.currentTimeMillis();
         List<PackageInfo> packinfos = pm.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_PERMISSIONS);
         for (PackageInfo info : packinfos) {
             String[] premissions = info.requestedPermissions;
             if (premissions != null && premissions.length > 0) {
                 for (String premission : premissions) {
                     long totalliu = 0L;
                     long totalRX = 0L;
                     long totalTx = 0L;
                     if ("android.permission.INTERNET".equals(premission)) {
                         uid = info.applicationInfo.uid;
                         appName = (String) pm.getApplicationLabel(info.applicationInfo);
                         drawable = info.applicationInfo.loadIcon(pm);
 //                         Log.i(TAG, "name:"+appName+"" +
 //                                "\ngetuid: "+uid);
                         try {
                             NetworkStats.Bucket bucketuid = new NetworkStats.Bucket();
                             NetworkStats Stats = networkStatsManager.queryDetailsForUid(ConnectivityManager.TYPE_MOBILE, subId,
                                     0, System.currentTimeMillis(), uid);
                             int nextbucket = 0;
                             Stats.getNextBucket(bucketuid);
                             totalliu += bucketuid.getRxBytes() + bucketuid.getTxBytes();
                             totalRX += bucketuid.getRxBytes();
                             totalTx += bucketuid.getTxBytes();
                             while (Stats.hasNextBucket()) {
                                 Stats.getNextBucket(bucketuid);
                                 totalliu += bucketuid.getRxBytes() + bucketuid.getTxBytes();
                                 totalRX += bucketuid.getRxBytes();
                                 totalTx += bucketuid.getTxBytes();
                                 nextbucket++;
                             }
                             HashMap<String, Object> test = new HashMap<>();
                             if (totalliu > 0) {
                                 test.put("appname", appName);
                                 test.put("icon", drawable);
                                 test.put("RX", "上行" + formate(totalTx));
                                 test.put("TX", "下行" + formate(totalRX));//formate(totalRX))正确正确结果为下行，KEY值是需要修改的
                                 test.put("total", totalliu);
                                 apptest.add(test);
                                 if(dislog)
                                 Log.i("luominmingWIFI", appName + "," + formate(totalTx) + "," + formate(totalRX) +
                                         "," + formate(totalliu) + "\n");
                             }
                         } catch (RemoteException e) {
                             e.printStackTrace();
                         }
                     }
                 }
             }
         }

     }

     @Override
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
         super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
         startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
     }
     private boolean hasPermissionToReadNetworkStats() {
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
             return true;
         }
         final AppOpsManager appOps = (AppOpsManager) getSystemService(Context.APP_OPS_SERVICE);
         int mode = appOps.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS,
                 android.os.Process.myUid(), getPackageName());
         if (mode == AppOpsManager.MODE_ALLOWED) {
             return true;
         }
         requestReadNetworkStats();
         return false;
     }
     private void requestReadNetworkStats() {
         dayin("请将龙旗流量监控设置为开启或ON");
         dayin("请将龙旗流量监控设置为开启或ON");
         startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
     }

 }

